From 40aab87428dcbc7f7cb8736d63b63f743e7b6350 Mon Sep 17 00:00:00 2001
From: David Kilp <David.Kilp@crossmatch.com>
Date: Tue, 9 Oct 2018 16:24:59 -0400
Subject: [PATCH 07/18] Add new driver to support the SMSC 4606 USB Hub chip.

If I2C support lines are connected this hub chip is configurable but in
"normal" operation this is not needed but if the I2C lines are connected
the hub will go into configuration mode automatically and must be reset
to exit to normal operation.
---
 drivers/misc/smsc4606-hub.c | 167 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 167 insertions(+)
 create mode 100644 drivers/misc/smsc4606-hub.c

diff --git a/drivers/misc/smsc4606-hub.c b/drivers/misc/smsc4606-hub.c
new file mode 100644
index 0000000..031b2a9
--- /dev/null
+++ b/drivers/misc/smsc4606-hub.c
@@ -0,0 +1,167 @@
+/*
+ * Driver for SMSC USB 4606 Hub chip I2C Configuration Mode Interface
+ *
+ *			Copyright (C) 2014 Cross Match Technologies
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This provides an I2C interface to the SMSC 4606 USB Hub chip 
+ * configuration interface. This interface allows customizing the 
+ * operation of the hub as required. 
+ * 
+ * For "normal" operation no configuration is needed and the default
+ * configuration will work fine. However, if the I2C/SMBUS lines are 
+ * connected to the hub chip then the chip on reset will automatically
+ * go into a configuation state and won't exit until a specific sequence
+ * of bytes ( 0xAA 0x55 0x00) is writen to it to tell it to begin 
+ * operating as a hub.
+ * 
+ */
+
+#include <linux/delay.h>
+#include <linux/i2c.h>
+#include <linux/interrupt.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/types.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+
+#define SMSC4606_NAME	"smsc4606"
+
+#define DRIVER_VERSION			"1.0.0"
+
+
+struct smsc4606_data {
+	struct device *dev;
+	struct i2c_client *client;
+	struct input_dev *input_dev;
+	
+	int hub_reset_gpio;
+};
+
+/* Holds driver data */
+struct smsc4606_data SMSC_data;
+
+/* reset the hub via GPIO line */
+static void smsc4606_reset_hub(int reset_gpio)
+{
+	/* reset the Hub */
+	gpio_set_value(reset_gpio, 0);
+	mdelay(25);	/* minimum RESET_N assert time: 1 usec) */
+	/* release USB Hub reset */
+	gpio_set_value(reset_gpio, 1);
+	/* Contiguration strap hold time before reconfiguring I2C3 lines (min 1msec) */
+	mdelay(10);
+}	
+
+static int smsc4606_probe(struct i2c_client *client,
+					const struct i2c_device_id *id)
+{
+	unsigned char hub_data[] = { 0xAA, 0x55, 0x00 };
+	struct device *dev = &client->dev;
+	struct smsc4606_data *di;
+	int ret;
+	int reset_gpio;
+
+	/* request Hub reset pin */
+	reset_gpio = of_get_named_gpio(dev->of_node, "reset-gpios", 0);
+	if (!gpio_is_valid(reset_gpio)) {
+		dev_err(dev, "no Hub reset pwdn pin available");
+		return -EINVAL;
+	}
+	ret = devm_gpio_request_one(dev, reset_gpio, GPIOF_OUT_INIT_LOW,
+					"usb-h3-reset");
+	if (ret < 0) {
+		return ret;
+	}
+	/* Export reset GPIO's to /sys for user access */
+	gpio_export(reset_gpio, 0);
+	
+
+	if (!i2c_check_functionality(client->adapter, I2C_FUNC_I2C)) {
+		dev_err(&client->dev, "need I2C_FUNC_I2C\n");
+		return -EIO;
+	}
+
+	di = &SMSC_data;
+
+	di->hub_reset_gpio = reset_gpio;
+	di->client = client;
+	di->dev = &client->dev;
+	i2c_set_clientdata(client, di);
+
+	/* reset the Hub */
+	smsc4606_reset_hub(reset_gpio);
+
+
+	/* Write AA 55 00 to tell device to exit config mode and begin normal operation */ 
+	if ( i2c_master_send(client, hub_data, 3) < 0 ) {
+		dev_err(&client->dev, "%s: SMSC hub i2c write fails\n", __func__);
+	}
+
+	dev_info(di->dev, "SMSC USB Hub I2C Configuration Device ver. %s enabled.\n", DRIVER_VERSION);
+
+	return 0;
+}
+
+static int smsc4606_remove(struct i2c_client *client)
+{
+    i2c_set_clientdata(client, NULL);
+
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int smsc4606_suspend(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct smsc4606_data *di = i2c_get_clientdata(client);
+
+	dev_dbg(di->dev, "smsc4606_suspend begins\n");
+
+	return 0;
+}
+
+static int smsc4606_resume(struct device *dev)
+{
+	struct i2c_client *client = to_i2c_client(dev);
+	struct smsc4606_data *di = i2c_get_clientdata(client);
+
+	dev_dbg(di->dev, "smsc4606_resume begins\n");
+
+	return 0;
+}
+
+static const struct dev_pm_ops smsc4606_pm_ops = {
+	.suspend	= smsc4606_suspend,
+	.resume		= smsc4606_resume,
+};
+#endif
+
+static const struct i2c_device_id smsc4606_id[] = {
+	{ SMSC4606_NAME, 0 },
+	{ }
+};
+MODULE_DEVICE_TABLE(i2c, smsc4606_id);
+
+static struct i2c_driver smsc4606_driver = {
+	.probe		= smsc4606_probe,
+	.remove		= smsc4606_remove,
+	.id_table	= smsc4606_id,
+	.driver = {
+		.name	= SMSC4606_NAME,
+		.owner	= THIS_MODULE,
+#ifdef CONFIG_PM
+		.pm	= &smsc4606_pm_ops,
+#endif
+	},
+};
+
+module_i2c_driver(smsc4606_driver);
+
+MODULE_DESCRIPTION("SMSC 4606 USB Hub Configurator");
+MODULE_AUTHOR("David Kilp <david.kilp@crossmatch.com>");
+MODULE_LICENSE("GPL");
-- 
2.9.5

