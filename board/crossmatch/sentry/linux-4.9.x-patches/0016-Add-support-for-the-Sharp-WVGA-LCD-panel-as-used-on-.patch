From 85da4f069de4ad27fdc4db87e23762e0a7175d49 Mon Sep 17 00:00:00 2001
From: David Kilp <David.Kilp@crossmatch.com>
Date: Tue, 9 Oct 2018 16:46:52 -0400
Subject: [PATCH 16/18] Add support for the Sharp-WVGA LCD panel as used on
 Crossmatch Sentry and the Ortus Tech LCD as used on the Crossmatch
 Quake/Nomad boards.

Both of these devices require SPI initialization to configure their
built-in Himax HX8363 driver chips when the display is reset. This needs
to be forced when the device resumes from sleep as this display will be
shut down and must be reset correctly on resume.
---
 drivers/video/fbdev/mxc/mxc_lcdif.c | 212 ++++++++++++++++++++++++++++++++++++
 1 file changed, 212 insertions(+)

diff --git a/drivers/video/fbdev/mxc/mxc_lcdif.c b/drivers/video/fbdev/mxc/mxc_lcdif.c
index 59d429c..35a9da2 100644
--- a/drivers/video/fbdev/mxc/mxc_lcdif.c
+++ b/drivers/video/fbdev/mxc/mxc_lcdif.c
@@ -17,8 +17,12 @@
 #include <linux/module.h>
 #include <linux/mxcfb.h>
 #include <linux/of_device.h>
+#include <linux/of_gpio.h>
 #include <linux/pinctrl/consumer.h>
 #include <linux/platform_device.h>
+#include <linux/spi/spi.h>
+#include <linux/gpio.h>
+#include <linux/delay.h>
 
 #include "mxc_dispdrv.h"
 
@@ -26,6 +30,7 @@ struct mxc_lcd_platform_data {
 	u32 default_ifmt;
 	u32 ipu_id;
 	u32 disp_id;
+	int reset_gpio;
 };
 
 struct mxc_lcdif_data {
@@ -35,6 +40,165 @@ struct mxc_lcdif_data {
 
 #define DISPDRV_LCD	"lcd"
 
+#define HX8363A_REG		0x01
+#define HX8363A_CMD		0x00
+
+#define SHARP_SLEEP_OUT		0x11
+#define SHARP_RGB_FORMAT1 	0xB9
+#define SHARP_RGB_FORMAT1 	0xB9
+
+static struct spi_board_info spi_sharp_device = {
+		.modalias = "lcdc_sharp",
+		.max_speed_hz = 100000, /* max spi clock (SCK) speed in HZ */
+		.bus_num = 1,			/* Claimcheck uses SPI-2 (bus 1) */
+		.chip_select = 1,
+		.mode = SPI_MODE_0,
+};
+
+static struct spi_board_info spi_ortus_device = {
+		.modalias = "lcdc_ortus",
+		.max_speed_hz = 1000000, /* max spi clock (SCK) speed in HZ */
+		.bus_num = 1,			/* Claimcheck uses SPI-2 (bus 1) */
+		.chip_select = 1,
+		.mode = SPI_MODE_3,
+};
+
+/*
+ * SPI write to 8-bit register specified with no data
+ * the hx8363 requires 9-bits of data so we need to set that and set bit 9 of the register when writing
+ */ 
+static int hx8363A_write(struct spi_device *spi_dev, const u8 register_address, const u8 *data, int len)
+{
+	int i;
+    u16 buffer[8];
+    u16 *ptr;
+    
+    struct spi_message msg;
+    struct spi_transfer index_xfer = {
+        .len            = 2,
+        .tx_buf     = buffer,
+        .rx_buf     = NULL,
+        .bits_per_word = 9,
+    };
+
+    buffer[0] = (HX8363A_CMD << 8) | register_address;
+	index_xfer.len = (len * 2) + 2;
+	ptr = &buffer[1];
+	for (i=0; i < len; i++) {
+		*ptr++ = (HX8363A_REG << 8) |  data[i];
+	}
+    
+    spi_message_init(&msg);
+    spi_message_add_tail(&index_xfer, &msg);
+   
+    return spi_sync(spi_dev, &msg);
+}
+
+/*!
+ * read "len" bytes of "data" buffer via SPI to 8-bit register specified 
+ * the hx8363 requires we send 9-bits of data but read back 8-bits (argh...)
+ * 
+ *  @return 	The function returns the register value or a negative errno value.
+*/ 
+static int hx8363A_read(struct spi_device *spi_dev, const u8 register_address, u8 *data, int len)
+{
+    int retval;
+    int i;
+    u16 txbuf[20];
+    u8 rxbuf[20];
+    struct spi_message msg;
+    struct spi_transfer transfer_array[2] = {
+        {
+            .len = 2,
+            .tx_buf = txbuf,
+            .rx_buf = NULL,
+			.bits_per_word = 9,
+        },
+        {
+            .tx_buf = NULL,
+            .rx_buf = rxbuf,
+			.bits_per_word = 8,
+        }
+    };
+    txbuf[0] = (HX8363A_CMD << 8) | register_address;
+    spi_message_init(&msg);
+    spi_message_add_tail(&transfer_array[0],&msg);
+    transfer_array[1].len = len;
+    transfer_array[1].rx_buf = rxbuf;
+    spi_message_add_tail(&transfer_array[1],&msg);
+
+    retval = spi_sync(spi_dev,&msg);
+    if (retval == 0) {
+		for (i=0; i < len; i++) {
+			data[i] = rxbuf[i];
+			//printk(" 0x%0X(0x%02X)", rxbuf[i], data[i]);
+		}
+    } else {
+        pr_err("%s: error %d(0x%x) reading from 0x%02x\n",__FUNCTION__,
+            retval, retval, register_address);
+    }
+
+    return retval;
+}
+
+struct spi_device *Display_spi_device = NULL;
+
+static int sharp_display_init(struct platform_device *pdev)
+{
+	struct spi_master *master; 
+	struct spi_device *spi = NULL;
+	struct mxc_lcd_platform_data *plat_data = pdev->dev.platform_data;
+	int ret = 0;
+	u8 buffer[10];
+
+	pr_debug("%s\n", __func__);
+
+	/* Reset the display */
+	gpio_set_value(plat_data->reset_gpio, 0);
+	msleep(10);
+	gpio_set_value(plat_data->reset_gpio, 1);
+	gpio_free(plat_data->reset_gpio);
+	
+
+	/* allocate SPI device and save for later (if needed) */
+	if (Display_spi_device==NULL) {
+		/* Get SPI 1 bus master information */
+		master = spi_busnum_to_master(1);
+		if (master == NULL) {
+			pr_err("SPI Master not present\n");
+			ret = 1;
+		}
+
+		spi = spi_new_device(master, &spi_sharp_device);
+		if (spi == NULL) {
+			pr_err("SPI device not present\n");
+			ret = 1;
+		}
+		
+		Display_spi_device = spi;
+		ret = hx8363A_read(spi, 0xDB, buffer, 1);
+		if (ret==0) 
+			printk("Sharp LCD Version:0x%x.\n", buffer[0]);
+	} else {
+		spi = Display_spi_device;
+	}
+
+	/* Initialize the display via SPI commands */
+	buffer[0] = 0x00;
+	ret = hx8363A_write(spi, 0x11, buffer, 0);
+	mdelay(250);		/* must wait min 100 msec */
+	buffer[0] = 0xFF;
+	buffer[1] = 0x83;
+	buffer[2] = 0x63;
+	ret = hx8363A_write(spi, 0xB9, buffer, 3);
+	buffer[0] = 0x70;
+	ret = hx8363A_write(spi, 0x3A, buffer, 1);
+	buffer[0] = 0x00;
+	ret = hx8363A_write(spi, 0x29, buffer, 0);
+		
+	return 0;
+}
+
 static struct fb_videomode lcdif_modedb[] = {
 	{
 	/* 800x480 @ 57 Hz , pixel clk @ 27MHz */
@@ -48,6 +212,24 @@ static struct fb_videomode lcdif_modedb[] = {
 	FB_SYNC_CLK_LAT_FALL,
 	FB_VMODE_NONINTERLACED,
 	0,},
+	{
+	/* Sharp 480x800 @ 60 Hz , pixel clk @ ~24.58 MHz */
+	"SHARP-WVGA", 60, 480, 800, 40683,
+	.left_margin = 15, .right_margin = 6,
+	.upper_margin = 3, .lower_margin = 3,
+	.hsync_len = 6, .vsync_len = 3,
+	.sync = 0,
+	.vmode = FB_VMODE_NONINTERLACED,
+	.flag = 0,},
+	{
+	/* Ortus Tech 120x320 @ 60 Hz , pixel clk @ ~5 MHz */
+	"ORTUSTECH", 60, 120, 320, 200417,
+	.left_margin = 19, .right_margin = 110,
+	.upper_margin = 4, .lower_margin = 4,
+	.hsync_len = 3, .vsync_len = 2,
+	.sync = 0,
+	.vmode = FB_VMODE_NONINTERLACED,
+	.flag = 0,},
 };
 static int lcdif_modedb_sz = ARRAY_SIZE(lcdif_modedb);
 
@@ -106,6 +288,7 @@ static int lcd_get_of_property(struct platform_device *pdev,
 	int err;
 	u32 ipu_id, disp_id;
 	const char *default_ifmt;
+	int reset_gpio;
 
 	err = of_property_read_string(np, "default_ifmt", &default_ifmt);
 	if (err) {
@@ -151,6 +334,16 @@ static int lcd_get_of_property(struct platform_device *pdev,
 		dev_err(&pdev->dev, "err default_ifmt!\n");
 		return -ENOENT;
 	}
+	
+	/* dkilp: Read Display reset GPIO init as HIGH */
+	reset_gpio = of_get_named_gpio(np, "reset-gpio", 0);
+	if (!gpio_is_valid(reset_gpio)) {
+		dev_warn(&pdev->dev, "No Display reset pin provided");
+		return -EINVAL;
+	}
+	err = devm_gpio_request_one(&pdev->dev, reset_gpio, GPIOF_OUT_INIT_HIGH,
+					"display-reset");
+	plat_data->reset_gpio = reset_gpio;
 
 	return err;
 }
@@ -206,6 +399,23 @@ static int mxc_lcdif_remove(struct platform_device *pdev)
 	return 0;
 }
 
+static int mxc_lcdif_suspend(struct platform_device *pdev,
+				pm_message_t message)
+{
+	return 0;
+}
+
+/*
+ * in case the display goes off into the weeds we should
+ * re-run the SPI initialization code on resume from sleep
+ */
+static int mxc_lcdif_resume(struct platform_device *pdev)
+{
+	sharp_display_init(pdev);
+
+	return 0;
+}
+
 static const struct of_device_id imx_lcd_dt_ids[] = {
 	{ .compatible = "fsl,lcd"},
 	{ /* sentinel */ }
@@ -217,6 +427,8 @@ static struct platform_driver mxc_lcdif_driver = {
 	},
 	.probe = mxc_lcdif_probe,
 	.remove = mxc_lcdif_remove,
+	.suspend = mxc_lcdif_suspend,
+	.resume = mxc_lcdif_resume,
 };
 
 static int __init mxc_lcdif_init(void)
-- 
2.9.5

