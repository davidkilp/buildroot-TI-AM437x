From 69d439b447a89fffe39be6d2576670c592472efc Mon Sep 17 00:00:00 2001
From: David Kilp <David.Kilp@crossmatch.com>
Date: Tue, 9 Oct 2018 16:33:23 -0400
Subject: [PATCH 10/18] Add kernel configration entries to select Crossmatch
 Sentry(codename Claimcheck) and Nomad (codename Quake) board features.

---
 arch/arm/mach-imx/Kconfig      |  15 ++
 arch/arm/mach-imx/mach-imx6q.c | 316 +++++++++++++++++++++++++++++++++++++++--
 2 files changed, 323 insertions(+), 8 deletions(-)

diff --git a/arch/arm/mach-imx/Kconfig b/arch/arm/mach-imx/Kconfig
index 5b3ce98..1980aa6 100644
--- a/arch/arm/mach-imx/Kconfig
+++ b/arch/arm/mach-imx/Kconfig
@@ -667,6 +667,21 @@ config MACH_IMX_BLUETOOTH_RFKILL
   help
      Say Y to get the standard rfkill interface of Bluetooth
 
+config CROSSMATCH_CLAIMCHECK
+	bool "Cross Match Claimcheck hardware features"
+	default n
+	help
+	   Enable this to enable features for the Cross Match Claimcheck/Sentry hardware.
+
+config CROSSMATCH_QUAKE
+	bool "Cross Match Quake/Groot hardware features"
+	default n
+	help
+	   Enable this to enable features for the Cross Match Quake/Groot hardware boards.
+	   This enables GPIO mapping and CLKO clock change outputs from 
+	   standard MX6 configuration.
+	   This is needed to configure the CLKO for FAP-60 sensor clock.
+
 source "arch/arm/mach-imx/devices/Kconfig"
 
 endif
diff --git a/arch/arm/mach-imx/mach-imx6q.c b/arch/arm/mach-imx/mach-imx6q.c
index b884209..5ff2ad8 100644
--- a/arch/arm/mach-imx/mach-imx6q.c
+++ b/arch/arm/mach-imx/mach-imx6q.c
@@ -21,6 +21,7 @@
 #include <linux/irqchip.h>
 #include <linux/of.h>
 #include <linux/of_address.h>
+#include <linux/of_gpio.h>
 #include <linux/of_irq.h>
 #include <linux/of_platform.h>
 #include <linux/pm_opp.h>
@@ -40,6 +41,249 @@
 #include "cpuidle.h"
 #include "hardware.h"
 
+
+#ifdef CONFIG_CROSSMATCH_CLAIMCHECK
+
+extern void __init claimcheck_nfc_init(void);
+
+struct class *sec_class;
+EXPORT_SYMBOL(sec_class);
+struct class *control_class;
+
+static int __init sec_common_init(void)
+{
+	sec_class = class_create(THIS_MODULE, "sec");
+	if (IS_ERR(sec_class))
+		pr_err("Failed to create class(sec)!\n");
+
+	return 0;
+}
+
+static void __init claimcheck_smartcard_init(void)
+{
+	struct device_node *np = NULL;
+	int ret, power_on_gpio;
+	struct device *smartcard_dev;
+
+	np = of_find_node_by_name(NULL, "smartcard_ctrl");
+	if (!np)
+		return;
+
+	smartcard_dev = device_create(sec_class, NULL, 0, NULL, "smartcard");
+	if (IS_ERR(smartcard_dev)) {
+		pr_err("Failed to create device(smartcard)!\n");
+		goto err;
+	}
+
+	/* Export GPIO for Smartcard power control (turn off now)*/
+	power_on_gpio = of_get_named_gpio(np, "sc_power-on-gpio", 0);
+	if (gpio_is_valid(power_on_gpio)) {
+		ret = gpio_request_one(power_on_gpio, GPIOF_OUT_INIT_LOW,
+			"smartcard_enable");
+		pr_warn("request smartcard_enable Power On gpio: %d\n", power_on_gpio);
+		if (ret)
+			pr_warn("failed to request smartcard_enable Power On gpio\n");
+
+		gpio_export(power_on_gpio, 1);
+		gpio_export_link(smartcard_dev, "smartcard_enable", power_on_gpio);
+	}
+
+	/* Export GPIO for NFC + Smartcard power control (turn off now) - if present (on v1.1 boards) */
+	power_on_gpio = of_get_named_gpio(np, "power-on-gpio", 0);
+	if (gpio_is_valid(power_on_gpio)) {
+		ret = gpio_request_one(power_on_gpio, GPIOF_OUT_INIT_LOW,
+			"sc_nfc_enable");
+		pr_warn("request smartcard + NFC Power On gpio: %d\n", power_on_gpio);
+		if (ret)
+			pr_warn("failed to request smartcard + NFC Power On gpio\n");
+
+		gpio_export(power_on_gpio, 1);
+		gpio_export_link(smartcard_dev, "sc_nfc_enable", power_on_gpio);
+	}
+
+	
+err:
+	return;
+}
+
+static int __init control_class_init(void)
+{
+	control_class = class_create(THIS_MODULE, "control");
+	if (IS_ERR(control_class))
+		pr_err("Failed to create class(control)!\n");
+
+	return 0;
+}
+
+/*
+ * configure GPIO for Battery Removal Detect/Reset 
+ * and export to user space
+ */
+static void __init claimcheck_battery_detect_init(void)
+{
+	struct device *battery_dev;
+	struct device_node *np = NULL;
+	int ret, bat_gpio;
+
+	np = of_find_node_by_name(NULL, "battery_ctrl");
+	if (!np)
+		return;
+
+	battery_dev = device_create(control_class, NULL, 0, NULL, "battery");
+	if (IS_ERR(battery_dev)) {
+		pr_err("Failed to create device(battery)!\n");
+		goto err;
+	}
+
+	/* Export GPIO for Battery Removal Reset gpio (turn off now) */
+	bat_gpio = of_get_named_gpio(np, "battery_removed_reset-gpio", 0);
+	if (gpio_is_valid(bat_gpio)) {
+		ret = gpio_request_one(bat_gpio, GPIOF_OUT_INIT_LOW,
+			"battery_rm_reset");
+		pr_warn("request battery_rm_reset gpio: %d\n", bat_gpio);
+		if (ret)
+			pr_warn("failed to request battery remove reset gpio\n");
+
+		gpio_export(bat_gpio, 0);
+		gpio_export_link(battery_dev, "battery_reset", bat_gpio);
+	}
+
+	/* Export GPIO for Battery Removed gpio (turn off now) */
+	bat_gpio = of_get_named_gpio(np, "battery_removed-gpio", 0);
+	if (gpio_is_valid(bat_gpio)) {
+		ret = gpio_request_one(bat_gpio, GPIOF_OUT_INIT_LOW,
+			"battery_rm_sense");
+		pr_warn("request battery_rm_reset gpio: %d\n", bat_gpio);
+		if (ret)
+			pr_warn("failed to request battery remove reset gpio\n");
+
+		gpio_export(bat_gpio, 0);
+		gpio_export_link(battery_dev, "battery_sense", bat_gpio);
+	}
+
+err:
+	return;
+}
+
+/*
+ * configure GPIO that controls the Charger LED.
+ * It must be set high to allow the charger to control it directly.
+ */
+static void __init claimcheck_led_charger_init(void)
+{
+	struct device_node *np = NULL;
+	int ret, led_gpio;
+
+	np = of_find_node_by_name(NULL, "led_charger_ctrl");
+	if (!np)
+		return;
+
+	/* Export GPIO for Battery Removal Reset gpio (turn off now) */
+	led_gpio = of_get_named_gpio(np, "led_charger-gpio", 0);
+	if (gpio_is_valid(led_gpio)) {
+		ret = gpio_request_one(led_gpio, GPIOF_OUT_INIT_HIGH,
+			"LED_Charger");
+		pr_warn("request Charger LED gpio: %d\n", led_gpio);
+		if (ret)
+			pr_warn("failed to request Charger LED gpio\n");
+
+	}
+	
+	return;
+}
+
+#endif	/* CONFIG_CROSSMATCH_CLAIMCHECK */
+
+#ifdef CONFIG_CROSSMATCH_QUAKE
+
+struct class *control_class;
+
+static int __init control_class_init(void)
+{
+	control_class = class_create(THIS_MODULE, "control");
+	if (IS_ERR(control_class))
+		pr_err("Failed to create class(control)!\n");
+
+	return 0;
+}
+
+/*
+ * configure GPIO for FAP-60 sensor External Start Signal (EXTST) control 
+ * and export to user space
+ */
+static void __init claimcheck_fap60_init(void)
+{
+	struct device *fap60_dev;
+	struct device_node *np = NULL;
+	int ret, fstart_gpio, fsiginj_gpio, fsiginj_cl_gpio, fsiginj_invert_gpio;
+
+	np = of_find_node_by_name(NULL, "fap60_start_ctrl");
+	if (!np)
+		return;
+
+	fap60_dev = device_create(control_class, NULL, 0, NULL, "fap60");
+	if (IS_ERR(fap60_dev)) {
+		pr_err("Failed to create device(fap60)!\n");
+		return;
+	}
+
+	/* Export GPIO for FAP-60 Sensor Start (turn off now) */
+	fstart_gpio = of_get_named_gpio(np, "fap60_start-gpio", 0);
+	if (gpio_is_valid(fstart_gpio)) {
+		ret = gpio_request_one(fstart_gpio, GPIOF_OUT_INIT_LOW,
+			"fps-start");
+		pr_warn("request Fap-60 Frame Start gpio: %d\n", fstart_gpio);
+		if (ret)
+			pr_warn("failed to request Fap-60 Frame Start gpio\n");
+
+		gpio_export(fstart_gpio, 0);
+		gpio_export_link(fap60_dev, "fps-start", fstart_gpio);
+	}
+
+	/* Export GPIO for FAP-60 Signal Inject GPIO (set to default low) */
+	fsiginj_gpio = of_get_named_gpio(np, "fap60_sig_inj-gpio", 0);
+	if (gpio_is_valid(fsiginj_gpio)) {
+		ret = gpio_request_one(fsiginj_gpio, GPIOF_OUT_INIT_LOW,
+			"fps-inject");
+		pr_warn("request Fap-60 Signal Inject gpio: %d\n", fsiginj_gpio);
+		if (ret)
+			pr_warn("failed to request Fap-60 Signal Inject gpio\n");
+
+		gpio_export(fsiginj_gpio, 0);
+		gpio_export_link(fap60_dev, "fps-inject", fsiginj_gpio);
+	}
+
+	/* Export GPIO for FAP-60 Signal Inject Current Limit GPIO (set to default low) */
+	fsiginj_cl_gpio = of_get_named_gpio(np, "fap60_sig_inj_cl-gpio", 0);
+	if (gpio_is_valid(fsiginj_cl_gpio)) {
+		ret = gpio_request_one(fsiginj_cl_gpio, GPIOF_OUT_INIT_LOW,
+			"fps-inject-cl");
+		pr_warn("request Fap-60 Signal Inject Current Limit gpio: %d\n", fsiginj_cl_gpio);
+		if (ret)
+			pr_warn("failed to request Fap-60 Signal Inject Current Limit gpio\n");
+
+		gpio_export(fsiginj_cl_gpio, 0);
+		gpio_export_link(fap60_dev, "fps-inject-cl", fsiginj_cl_gpio);
+	}
+
+	/* Export GPIO for FAP-60 Signal Inject Invert GPIO (set to default low) */
+	fsiginj_invert_gpio = of_get_named_gpio(np, "fap60_sig_inj_invert-gpio", 0);
+	if (gpio_is_valid(fsiginj_invert_gpio)) {
+		ret = gpio_request_one(fsiginj_invert_gpio, GPIOF_OUT_INIT_LOW,
+			"fps-inject-invert");
+		pr_warn("request Fap-60 Signal Inject Invert gpio: %d\n", fsiginj_invert_gpio);
+		if (ret)
+			pr_warn("failed to request Fap-60 Signal Inject Invert gpio\n");
+
+		gpio_export(fsiginj_invert_gpio, 0);
+		gpio_export_link(fap60_dev, "fps-inject-invert", fsiginj_invert_gpio);
+	}
+
+	return;
+}
+
+#endif	/* CONFIG_CROSSMATCH_QUAKE */
+
 /* For imx6q sabrelite board: set KSZ9021RN RGMII pad skew */
 static int ksz9021rn_phy_fixup(struct phy_device *phydev)
 {
@@ -217,12 +461,18 @@ static void __init imx6q_1588_init(void)
 	 * (external OSC), and we need to clear the bit.
 	 */
 	gpr = syscon_regmap_lookup_by_compatible("fsl,imx6q-iomuxc-gpr");
-	if (!IS_ERR(gpr))
-		regmap_update_bits(gpr, IOMUXC_GPR1,
-				IMX6Q_GPR1_ENET_CLK_SEL_MASK,
-				IMX6Q_GPR1_ENET_CLK_SEL_ANATOP);
-	else
-		pr_err("failed to find fsl,imx6q-iomuxc-gpr regmap\n");
+	if (!IS_ERR(gpr)) {
+		if ( ! of_machine_is_compatible("fsl,imx6q-quake") &&
+			 ! of_machine_is_compatible("fsl,imx6q-groot") &&
+			 ! of_machine_is_compatible("fsl,imx6q-groot3") &&
+			 ! of_machine_is_compatible("fsl,imx6q-nomad4")
+		) {
+			regmap_update_bits(gpr, IOMUXC_GPR1,
+					IMX6Q_GPR1_ENET_CLK_SEL_MASK,
+					IMX6Q_GPR1_ENET_CLK_SEL_ANATOP);
+		}
+	} else
+		pr_err("failed to find fsl,imx6q-iomux-gpr regmap\n");
 
 	clk_put(ptp_clk);
 put_node:
@@ -232,10 +482,14 @@ static void __init imx6q_1588_init(void)
 static void __init imx6q_csi_mux_init(void)
 {
 	/*
-	 * MX6Q SabreSD board:
+	 * MX6Q SabreSD + Claimcheck + Quake boards:
 	 * IPU1 CSI0 connects to parallel interface.
 	 * Set GPR1 bit 19 to 0x1.
 	 *
+	 * for Quake/Groot/Groot3:
+	 * IPU2 connect parallel interface to CSI1
+	 * Set GPR1 bit 20 to 0x01
+	 *
 	 * MX6DL SabreSD board:
 	 * IPU1 CSI0 connects to parallel interface.
 	 * Set GPR13 bit 0-2 to 0x4.
@@ -251,7 +505,15 @@ static void __init imx6q_csi_mux_init(void)
 			of_machine_is_compatible("fsl,imx6qp-sabresd") ||
 			of_machine_is_compatible("fsl,imx6qp-sabreauto"))
 			regmap_update_bits(gpr, IOMUXC_GPR1, 1 << 19, 1 << 19);
-		else if (of_machine_is_compatible("fsl,imx6dl-sabresd") ||
+		else if (of_machine_is_compatible("fsl,imx6q-quake") ||
+				 of_machine_is_compatible("fsl,imx6q-groot") ||
+				 of_machine_is_compatible("fsl,imx6q-groot3") ||
+				 of_machine_is_compatible("fsl,imx6q-nomad4") 
+				 ) 
+			 {
+				regmap_update_bits(gpr, IOMUXC_GPR1, 1 << 19, 1 << 19);
+				regmap_update_bits(gpr, IOMUXC_GPR1, 1 << 20, 1 << 20);
+		} else if (of_machine_is_compatible("fsl,imx6dl-sabresd") ||
 			 of_machine_is_compatible("fsl,imx6dl-sabreauto"))
 			regmap_update_bits(gpr, IOMUXC_GPR13, 0x3F, 0x0C);
 	} else {
@@ -441,6 +703,44 @@ static void __init imx6q_init_late(void)
 		imx6q_opp_init();
 		platform_device_register(&imx6q_cpufreq_pdev);
 	}
+
+#ifdef CONFIG_CROSSMATCH_CLAIMCHECK
+	if ( of_machine_is_compatible("fsl,imx6q-claimcheck") ) {
+		pr_info("===> Do extra board setup for claimcheck\n");
+
+		/* NFC configure */
+		claimcheck_nfc_init();
+		
+		/* contact smartcard */
+		sec_common_init();
+		claimcheck_smartcard_init();
+
+		/* Create a control class for logical-to-physical GPIO mapping */
+		control_class_init();
+		/* Battery Removal Detect/Sense */
+		claimcheck_battery_detect_init();
+		
+		/* Configure LED_CHG_EN pin as ouput always high to allow hardware to control it */
+		claimcheck_led_charger_init();
+	}
+
+#endif	/* CONFIG_CROSSMATCH_CLAIMCHECK */
+
+#ifdef CONFIG_CROSSMATCH_QUAKE
+	if ( of_machine_is_compatible("fsl,imx6q-quake") || 
+		 of_machine_is_compatible("fsl,imx6q-groot") ||
+		 of_machine_is_compatible("fsl,imx6q-groot3") ||
+		 of_machine_is_compatible("fsl,imx6q-nomad4")
+	 ) {
+		pr_info("===> Do extra board setup for quake/groot/groot3/nomad4\n");
+				
+		/* Create a control class for logical-to-physical GPIO mapping */
+		control_class_init();
+		/* FAP-60 Sensor Ext Capture Start signal */
+		claimcheck_fap60_init();
+	}
+#endif	/* CONFIG_CROSSMATCH_QUAKE */
+
 }
 
 static void __init imx6q_map_io(void)
-- 
2.9.5

