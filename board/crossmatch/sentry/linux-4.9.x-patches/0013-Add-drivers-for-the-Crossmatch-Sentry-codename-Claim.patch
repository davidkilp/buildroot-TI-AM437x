From 3b5e120a25693b7a7f80b61a6642f39aac7ac1d9 Mon Sep 17 00:00:00 2001
From: David Kilp <David.Kilp@crossmatch.com>
Date: Tue, 9 Oct 2018 16:37:59 -0400
Subject: [PATCH 13/18] Add drivers for the Crossmatch Sentry (codename
 Claimcheck) device for: - Aux 5V switch - GPS power switch - USB Host2
 accessory switch

These all need drivers that will respond to suspend/resume commands so
that we can save power and turn these devices off while suspended.
---
 drivers/gpio/Kconfig               |  21 +++
 drivers/gpio/Makefile              |   3 +
 drivers/gpio/gpio-cmtaux5v.c       | 138 ++++++++++++++++++
 drivers/gpio/gpio-cmtgps.c         | 155 ++++++++++++++++++++
 drivers/gpio/gpio-cmtusbhostport.c | 280 +++++++++++++++++++++++++++++++++++++
 5 files changed, 597 insertions(+)
 create mode 100644 drivers/gpio/gpio-cmtaux5v.c
 create mode 100644 drivers/gpio/gpio-cmtgps.c
 create mode 100644 drivers/gpio/gpio-cmtusbhostport.c

diff --git a/drivers/gpio/Kconfig b/drivers/gpio/Kconfig
index dafa3f9..39c90bf 100644
--- a/drivers/gpio/Kconfig
+++ b/drivers/gpio/Kconfig
@@ -150,6 +150,27 @@ config GPIO_CLPS711X
 	help
 	  Say yes here to support GPIO on CLPS711X SoCs.
 
+config GPIO_CMT_AUX5V
+	tristate "Cross Match AUX 5V accessory switch"
+	depends on OF_GPIO
+	help
+	  Driver for controlling AUX 5V switch for accessories.
+	  This provides GPIO interface turning the switch on/off.
+
+config GPIO_CMT_GPS
+	tristate "Cross Match GPS Power switch"
+	depends on OF_GPIO
+	help
+	  Driver for controlling GPS Power.
+	  This provides GPIO interface turning GPS on/off.
+	  
+config GPIO_CMT_HOST2
+	tristate "Cross Match USB Host2 accessory switch"
+	depends on OF_GPIO
+	help
+	  Driver for controlling the external USB (host2) accessory port.
+	  This provides GPIO interface turning the port on/off.
+
 config GPIO_DAVINCI
 	bool "TI Davinci/Keystone GPIO support"
 	default y if ARCH_DAVINCI
diff --git a/drivers/gpio/Makefile b/drivers/gpio/Makefile
index d074c22..f2db2f0 100644
--- a/drivers/gpio/Makefile
+++ b/drivers/gpio/Makefile
@@ -34,6 +34,9 @@ obj-$(CONFIG_GPIO_BCM_KONA)	+= gpio-bcm-kona.o
 obj-$(CONFIG_GPIO_BRCMSTB)	+= gpio-brcmstb.o
 obj-$(CONFIG_GPIO_BT8XX)	+= gpio-bt8xx.o
 obj-$(CONFIG_GPIO_CLPS711X)	+= gpio-clps711x.o
+obj-$(CONFIG_GPIO_CMT_AUX5V)	+= gpio-cmtaux5v.o
+obj-$(CONFIG_GPIO_CMT_GPS)	+= gpio-cmtgps.o
+obj-$(CONFIG_GPIO_CMT_HOST2)	+= gpio-cmtusbhostport.o
 obj-$(CONFIG_GPIO_CS5535)	+= gpio-cs5535.o
 obj-$(CONFIG_GPIO_CRYSTAL_COVE)	+= gpio-crystalcove.o
 obj-$(CONFIG_GPIO_DA9052)	+= gpio-da9052.o
diff --git a/drivers/gpio/gpio-cmtaux5v.c b/drivers/gpio/gpio-cmtaux5v.c
new file mode 100644
index 0000000..4ab2510
--- /dev/null
+++ b/drivers/gpio/gpio-cmtaux5v.c
@@ -0,0 +1,138 @@
+/*
+ * Cross Match platform GPIO AUX 5V switch abstraction 
+ * 
+ * Provides a "consumer" for the Aux-5V supply so that it will
+ * be enabled/disabled on power-up and on suspend/resume operations
+ * automatically.
+ *
+ * Copyright (C) 2016 Cross Match Technolgies, Inc.
+ * David Kilp <david.kilp@crossmatch.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/regulator/consumer.h>
+#include <linux/types.h>
+
+/*!
+ * Maintains the information on the current state of the AUX5V line.
+ */
+static struct regulator *aux5v_regulator;
+
+
+/*!
+ * whether we should use Power Management (PM) to toggle the GPIO 
+ */
+static int use_PM = 1;			/* default to true if not set */
+
+/*!
+ * cmtaux5v detach function
+ *
+ * @param pdev            struct platform_device *
+ * @return  Error code indicating success or failure
+ */
+static int cmtaux5v_remove(struct platform_device *pdev)
+{
+
+	if (aux5v_regulator)
+		regulator_disable(aux5v_regulator);
+
+	return 0;
+}
+
+static int cmtaux5v_gpio_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	int ret;
+	u32 value;
+
+	aux5v_regulator = devm_regulator_get(dev, "aux5v");
+	if (!IS_ERR(aux5v_regulator)) {
+		ret = regulator_enable(aux5v_regulator);
+		if (ret) {
+			pr_err("%s:Enable Aux5V regulator error\n", __func__);
+			return ret;
+		}
+	} else {	
+		pr_err("%s: cannot get aux5v voltage error\n", __func__);
+		aux5v_regulator = NULL;
+		return -EINVAL;
+	}
+
+	ret = of_property_read_u32(dev->of_node, "use_pm", &value);
+	if (ret < 0) {
+		dev_dbg(&pdev->dev, "can not get use_pm, enabling PM ops\n");
+		value = use_PM; 	/* use default */
+	}
+	use_PM = (int)value;
+
+	dev_info(&pdev->dev, "Aux 5V device registered/enabled, use_PM=%d\n", use_PM);
+	return 0;
+}
+
+#ifdef CONFIG_PM
+static int cmtaux5v_suspend(struct device *dev)
+{
+	printk(KERN_DEBUG "cmtaux5v_suspend begins\n");
+	
+	if (use_PM) {
+		if (aux5v_regulator) {
+			if ( regulator_disable(aux5v_regulator) )
+				pr_err("%s:Re-enable of Aux5V regulator failed\n", __func__);
+		}
+	}
+	
+	return 0;
+}
+
+static int cmtaux5v_resume(struct device *dev)
+{
+	printk(KERN_DEBUG "cmtaux5v_resume begins\n");
+
+	if (use_PM) {
+		if (aux5v_regulator) {
+			if ( regulator_enable(aux5v_regulator) ) 
+				pr_err("%s:Re-enable of Aux5V regulator failed\n", __func__);
+		}
+	}
+	
+	return 0;
+}
+
+static const struct dev_pm_ops cmtaux5v_pm_ops = {
+	.suspend	= cmtaux5v_suspend,
+	.resume		= cmtaux5v_resume,
+};
+#endif
+
+static const struct of_device_id cmtaux5v_gpio_id[] = {
+	{ .compatible = "cmt,cmtaux5v-gpio" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, cmtaux5v_gpio_id);
+
+static struct platform_driver cmtaux5v_gpio_driver = {
+	.probe = cmtaux5v_gpio_probe,
+	.remove = cmtaux5v_remove,
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = "cmtaux5v-gpio",
+		.of_match_table = cmtaux5v_gpio_id,
+#ifdef CONFIG_PM
+		.pm	= &cmtaux5v_pm_ops,
+#endif
+	},
+};
+
+module_platform_driver(cmtaux5v_gpio_driver)
+
+
+MODULE_AUTHOR("David Kilp <david.kilp@crossmatch.com>");
+MODULE_DESCRIPTION("Cross Match AUX 5V switch Abstraction");
+MODULE_LICENSE("GPL");
diff --git a/drivers/gpio/gpio-cmtgps.c b/drivers/gpio/gpio-cmtgps.c
new file mode 100644
index 0000000..ec25e63
--- /dev/null
+++ b/drivers/gpio/gpio-cmtgps.c
@@ -0,0 +1,155 @@
+/*
+ * Cross Match platform GPIO switch abstraction to GPS chip 
+ * 
+ * Provides a "driver" for the GPS power control lines so that
+ * the GPS will be enabled/disabled on suspend/resume operations
+ * automatically. If this is not done, the result is overflowing
+ * the UART receiver.
+ *
+ * Copyright (C) 2016 Cross Match Technolgies, Inc.
+ * David Kilp <david.kilp@crossmatch.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/types.h>
+
+/*!
+ * Maintains the state of the GPS power line.
+ */
+static unsigned int gps_power;
+static int pwn_gpio;
+
+#define PWR_OFF		0
+#define PWR_ON		1
+
+/*!
+ * cmtgps_remove detach function
+ *
+ * @param pdev            struct platform_device *
+ * @return  Error code indicating success or failure
+ */
+static int cmtgps_remove(struct platform_device *pdev)
+{
+	return 0;
+}
+
+static ssize_t gps_power_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%u\n", gps_power);
+}
+
+static ssize_t gps_power_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int rc;
+	unsigned int val;
+
+	rc = kstrtouint(buf, 0, &val);
+	if (rc < 0)
+		return rc;
+	if (val > PWR_ON)
+		return -EINVAL;
+	gps_power = val;
+	gpio_set_value(pwn_gpio, gps_power);
+	return count;
+}
+
+static DEVICE_ATTR(gps_power, S_IWUSR | S_IRUGO, gps_power_show,
+		gps_power_store);
+
+
+static int cmtgps_gpio_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	int ret;
+
+	/* request power down pin */
+	pwn_gpio = of_get_named_gpio(dev->of_node, "pwn-gpios", 0);
+	if (!gpio_is_valid(pwn_gpio)) {
+		dev_warn(dev, "no GPS pwdn pin available");
+		return -EINVAL;
+	}
+	ret = devm_gpio_request_one(dev, pwn_gpio, GPIOF_OUT_INIT_LOW,
+					"gps_power");
+	if (ret < 0)
+		return ret;
+
+
+	if (device_create_file(&pdev->dev, &dev_attr_gps_power))
+		pr_err("%s: device_create_file() failed\n", __func__);
+
+	gps_power = 0;
+
+	dev_info(&pdev->dev, "GPS device registered/enabled\n");
+	return 0;
+}
+
+#ifdef CONFIG_PM
+
+/*
+ * When suspending save current state of GPS power control (on/off)
+ * and then turn off power to GPS chip to save power.
+ * When we resume restore the saved state. 
+ */
+static int cmtgps_suspend(struct device *dev)
+{
+	printk(KERN_DEBUG "cmtgps_suspend begins\n");
+	
+	/* save the state of the GPS Power Enable and turn it off */
+	gps_power = gpio_get_value(pwn_gpio);
+	gpio_set_value(pwn_gpio, 0);
+
+	return 0;
+}
+
+static int cmtgps_resume(struct device *dev)
+{
+	printk(KERN_DEBUG "cmtgps_resume begins\n");
+
+	if (gps_power)
+		gpio_set_value(pwn_gpio, 1);
+
+	return 0;
+}
+
+static const struct dev_pm_ops cmtgps_pm_ops = {
+	.suspend	= cmtgps_suspend,
+	.resume		= cmtgps_resume,
+};
+#endif
+
+static const struct of_device_id cmtgps_gpio_id[] = {
+	{ .compatible = "cmt,cmtgps-gpio" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, cmtgps_gpio_id);
+
+static struct platform_driver cmtgps_gpio_driver = {
+	.probe = cmtgps_gpio_probe,
+	.remove = cmtgps_remove,
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = "cmtgps-gpio",
+		.of_match_table = cmtgps_gpio_id,
+#ifdef CONFIG_PM
+		.pm	= &cmtgps_pm_ops,
+#endif
+	},
+};
+
+module_platform_driver(cmtgps_gpio_driver)
+
+
+MODULE_AUTHOR("David Kilp <david.kilp@crossmatch.com>");
+MODULE_DESCRIPTION("Cross Match GPS Power switch Abstraction");
+MODULE_LICENSE("GPL");
diff --git a/drivers/gpio/gpio-cmtusbhostport.c b/drivers/gpio/gpio-cmtusbhostport.c
new file mode 100644
index 0000000..b8a0263
--- /dev/null
+++ b/drivers/gpio/gpio-cmtusbhostport.c
@@ -0,0 +1,280 @@
+/*
+ * Cross Match platform GPIO switch abstraction for the External
+ * USB Host Accessory Port (host2) 
+ *  
+ * Provides a "driver" for the external USB host port on Sentry
+ * so that the port can be enabled/disabled on suspend/resume
+ * operations automatically. 
+ * 
+ * NOTE: This operation can be controlled via the "use_PM" setting
+ * in the devicetree configuration for this driver.
+ * If the port should be left alone (don't turn the port off)
+ * then set use_PM to 0.
+ * If you wish to have this driver control the port set use_PM to 1.
+ * 
+ * Turning the port on/off with devices attached can affect 
+ * resume operations on the port if the attached device is removed 
+ * as then hub will then reset all attached devices.
+ * 
+ * The Power management is tied into the Frame Buffer operation so
+ * when the screen goes blank, the port will be turned off if use_PM 
+ * is 1. 
+ *
+ * Copyright (C) 2016 Cross Match Technolgies, Inc.
+ * David Kilp <david.kilp@crossmatch.com>
+ *
+ * This file is licensed under the terms of the GNU General Public
+ * License version 2. This program is licensed "as is" without any
+ * warranty of any kind, whether express or implied.
+ */
+
+#include <linux/err.h>
+#include <linux/gpio.h>
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/types.h>
+#ifdef CONFIG_FB
+#include <linux/notifier.h>
+#include <linux/fb.h>
+#endif
+
+/*!
+ * whether we should use Power Management (PM) to toggle the GPIO 
+ */
+static int use_PM = 1;			/* default to true if not set */
+
+/*!
+ * state of frame buffer callback 
+ */
+#if   defined(CONFIG_FB)
+static	struct notifier_block Notifier;
+#endif
+
+/*!
+ * Maintains the state of the port switch.
+ */
+static unsigned int port_power;
+static int switch_gpio;
+
+#define PWR_OFF		0
+#define PWR_ON		1
+
+static int usbhostport_register_powermanger(void);
+static int usbhostport_unregister_powermanger(void);
+
+/*!
+ * usbhostport_remove detach function
+ *
+ * @param pdev            struct platform_device *
+ * @return  Error code indicating success or failure
+ */
+static int usbhostport_remove(struct platform_device *pdev)
+{
+	usbhostport_unregister_powermanger();
+
+	return 0;
+}
+
+static ssize_t usbhostport_show(struct device *dev,
+		struct device_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%u\n", port_power);
+}
+
+static ssize_t usbhostport_store(struct device *dev,
+		struct device_attribute *attr, const char *buf, size_t count)
+{
+	int rc;
+	unsigned int val;
+
+	rc = kstrtouint(buf, 0, &val);
+	if (rc < 0)
+		return rc;
+	if (val > PWR_ON)
+		return -EINVAL;
+	port_power = val;
+	gpio_set_value(switch_gpio, port_power);
+	return count;
+}
+
+static DEVICE_ATTR(port_power, S_IWUSR | S_IRUGO, usbhostport_show,
+		usbhostport_store);
+
+
+static int usbhostport_gpio_probe(struct platform_device *pdev)
+{
+	struct device *dev = &pdev->dev;
+	int ret;
+	u32 value;
+
+	/* request port pin and turn it ON */
+	switch_gpio = of_get_named_gpio(dev->of_node, "port-gpios", 0);
+	if (!gpio_is_valid(switch_gpio)) {
+		dev_warn(dev, "USB Accessory port switch pin not available");
+		return -EINVAL;
+	}
+	ret = devm_gpio_request_one(dev, switch_gpio, GPIOF_OUT_INIT_HIGH,
+					"USB Accessory Port");
+	if (ret < 0)
+		return ret;
+
+	port_power = 1; 	/* the port is enabled now */
+
+	if (device_create_file(&pdev->dev, &dev_attr_port_power))
+		pr_err("%s: device_create_file() failed\n", __func__);
+
+
+	ret = of_property_read_u32(dev->of_node, "use_pm", &value);
+	if (ret < 0) {
+		dev_dbg(&pdev->dev, "can not get use_pm, enabling PM ops\n");
+		value = use_PM; 	/* use default */
+	}
+	use_PM = (int)value;
+
+	/* register suspend and resume fucntion*/
+	usbhostport_register_powermanger();
+
+	dev_info(&pdev->dev, "USB Accessory port registered/enabled, use_PM=%d\n", use_PM);
+	return 0;
+}
+
+/*!
+ * Early suspend function.
+ */
+/*
+ * When suspending save current state of the port switch (on/off)
+ * and then turn off the swich to save power if use_PM is true
+ * When we resume restore the saved state. 
+ */
+static int usbhostport_suspend(void)
+{
+	printk(KERN_DEBUG "%s\n", __func__);
+	
+	if (use_PM) {
+		/* save the state of the port enable/disable and turn it off */
+		port_power = gpio_get_value(switch_gpio);
+		gpio_set_value(switch_gpio, 0);
+	}
+
+	return 0;
+}
+
+/*!
+ * Late resume function.
+ */
+static int usbhostport_resume(void)
+{
+	printk(KERN_DEBUG "%s\n", __func__);
+
+	if (use_PM) {
+		if (port_power)
+			gpio_set_value(switch_gpio, 1);
+	}
+	
+	return 0;
+}
+
+#if   defined(CONFIG_FB)	
+/* frame buffer notifier block control the suspend/resume procedure */
+static int fb_notifier_callback(struct notifier_block *noti, unsigned long event, void *data)
+{
+	struct fb_event *ev_data = data;
+	int *blank;
+	
+	if (ev_data && ev_data->data && event == FB_EVENT_BLANK) {
+		blank = ev_data->data;
+		if (*blank == FB_BLANK_UNBLANK) {
+			printk(KERN_DEBUG "Resume by fb notifier.");
+			usbhostport_resume();
+		}
+		else if (*blank == FB_BLANK_POWERDOWN) {
+			printk(KERN_DEBUG "Suspend by fb notifier.");
+			usbhostport_suspend();
+		}
+	}
+
+	return 0;
+}
+#elif defined(CONFIG_PM)
+/*
+ * When suspending save current state of the port switch (on/off)
+ * and then turn off the swich to save power if use_PM is true
+ * When we resume restore the saved state. 
+ */
+static int pm_suspend(struct device *dev)
+{
+	printk(KERN_DEBUG "usbhostport_suspend begins\n");
+	
+	if (use_PM) {
+		/* save the state of the port enable/disable and turn it off */
+		port_power = gpio_get_value(switch_gpio);
+		gpio_set_value(switch_gpio, 0);
+	}
+
+	return 0;
+}
+
+static int pm_resume(struct device *dev)
+{
+	printk(KERN_DEBUG "usbhostport_resume begins\n");
+
+	if (use_PM) {
+		if (port_power)
+			gpio_set_value(switch_gpio, 1);
+	}
+	
+	return 0;
+}
+
+static const struct dev_pm_ops usbhostport_pm_ops = {
+	.suspend	= pm_suspend,
+	.resume		= pm_resume,
+};
+#endif
+
+static int usbhostport_register_powermanger(void)
+{
+#if   defined(CONFIG_FB)
+	Notifier.notifier_call = fb_notifier_callback;
+	fb_register_client(&Notifier);
+	#endif	
+
+	return 0;
+}
+
+static int usbhostport_unregister_powermanger(void)
+{
+#if   defined(CONFIG_FB)
+		fb_unregister_client(&Notifier);
+#endif	
+		
+	return 0;
+}
+
+static const struct of_device_id usbhostport_gpio_id[] = {
+	{ .compatible = "cmt,cmtusbhostport-gpio" },
+	{}
+};
+MODULE_DEVICE_TABLE(of, usbhostport_gpio_id);
+
+static struct platform_driver usbhostport_gpio_driver = {
+	.probe = usbhostport_gpio_probe,
+	.remove = usbhostport_remove,
+	.driver = {
+		.owner = THIS_MODULE,
+		.name = "cmtusbhostport-gpio",
+		.of_match_table = usbhostport_gpio_id,
+#if !defined(CONFIG_FB) && defined(CONFIG_PM)
+		.pm	= &usbhostport_pm_ops,
+#endif
+	},
+};
+
+module_platform_driver(usbhostport_gpio_driver)
+
+
+MODULE_AUTHOR("David Kilp <david.kilp@crossmatch.com>");
+MODULE_DESCRIPTION("Cross Match USB Accessory Port switch Abstraction");
+MODULE_LICENSE("GPL");
-- 
2.9.5

